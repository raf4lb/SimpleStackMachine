; Use a button to control a led
; https://wokwi.com/projects/392567753366512641

#include delay.rfl

fn .main
    PUSHL_U16 50         ; push 0b110010 to stack
    POPA_U16 $ddrb       ; set DDRB to 0b110010
    ; FIX PASSING PARAMS TO ASYNC CALL
    PUSHL_U16 1
    PUSHL_U16 500
    PUSHL_U16 .nop
    ASYNC_CALL .toggle_pinbx
    ; FIX PASSING PARAMS TO ASYNC CALL
    PUSHL_U16 4
    PUSHL_U16 1000
    PUSHL_U16 .nop
    ASYNC_CALL .toggle_pinbx
    CALL .toggle_main_pin
    
fn .toggle_main_pin
    PUSHL_U16 2
    ALLOC_LOCAL $main_pin
    PUSHL_U16 5
    PUSHL_U16 2
    POP_LOCAL $main_pin
    PUSHL_U16 2
    ALLOC_LOCAL $main_delay_ms
    PUSHL_U16 2000
    PUSHL_U16 2
    POP_LOCAL $main_delay_ms
    .loop
        ; PORTB = PORTB | (1 << PINB5)
        PUSH_U16 $portb             ; push PORTB to stack
        PUSHL_U16 1                 ; push 1 to stack
        PUSHL_U16 2
        PUSH_LOCAL $main_pin    ; push pin to stack
        LSHIFT_U16                  ; bitwise LEFT SHIFT operation
        OR_U16                      ; bitwise OR operation
        POPA_U16 $portb             ; pop result to address 0x1 (PORTB)
        PUSHL_U16 2
        PUSH_LOCAL $main_delay_ms
        CALL .delay_ms

        ; PORTB = PORTB & ~(1 << PINB5)
        PUSH_U16 $portb             ; push PORTB to stack
        PUSHL_U16 1                 ; push 1 to stack
        PUSHL_U16 5                 ; push 5 to stack
        LSHIFT_U16                  ; bitwise LEFT SHIFT operation
        NOT_U16                     ; bitwise NOT operation
        AND_U16                     ; bitwise AND operation
        POPA_U16 $portb             ; pop result to address 0x1 (PORTB)
        PUSHL_U16 2
        PUSH_LOCAL $main_delay_ms
        CALL .delay_ms
        JUMP .loop
        RETURN

.toggle_pinbx
    PUSHL_U16 2
    ALLOC_LOCAL $delay_ms
    PUSHL_U16 2
    ALLOC_LOCAL $pin
    PARENT_POP_LOCAL_U16 $delay_ms
    PARENT_POP_LOCAL_U16 $pin
    .toggle_pin_loop
        ; PORTB = PORTB | (1 << PINBX)
        PUSH_U16 $portb         ; push PORTB to stack
        PUSHL_U16 1             ; push 1 to stack
        PUSHL_U16 2
        PUSH_LOCAL $pin     ; push pin to stack
        LSHIFT_U16              ; bitwise LEFT SHIFT operation
        OR_U16                  ; bitwise OR operation
        POPA_U16 $portb         ; pop result to address 0x1 (PORTB)
        PUSHL_U16 2
        PUSH_LOCAL $delay_ms
        CALL .delay_ms

        ; PORTB = PORTB & ~(1 << PINBX)
        PUSH_U16 $portb         ; push PORTB to stack
        PUSHL_U16 1             ; push 1 to stack
        PUSHL_U16 2
        PUSH_LOCAL $pin   ; push pin to stack
        LSHIFT_U16              ; bitwise LEFT SHIFT operation
        NOT_U16                 ; bitwise NOT operation
        AND_U16                 ; bitwise AND operation
        POPA_U16 $portb         ; pop result to address 0x1 (PORTB)
        PUSHL_U16 2
        PUSH_LOCAL $delay_ms
        CALL .delay_ms
        JUMP .toggle_pin_loop

fn .nop
    RETURN